name: Example CI/CD Workflow

on:
    push:
        branches: develop
    pull_request:
        branches: develop

jobs:
    path-filter:
        runs-on: ubuntu-latest
        permissions:
            pull-requests: read
        outputs:
            dags-changed: ${{ steps.filter.outputs.dags }}
            docker-changed: ${{ steps.filter.outputs.docker }}
        steps:
            - uses: actions/checkout@v4

            - name: Path Filter
              id: filter
              uses: dorny/paths-filter@v3
              with:
                  filters: |
                      dags:
                        - 'dags/**/*.py'
                        - 'tests/dags/**/*.py' 
                      docker:
                        - 'docker-compose.yaml'
                        - 'Dockerfile'

    build:
        needs: path-filter
        if: needs.path-filter.outputs.dags-changed == 'true'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Set Environment Variables
              run: |
                  echo "PYTHON_VERSION=3.11" >> $GITHUB_ENV
                  echo "AIRFLOW_VERSION=2.7.2" >> $GITHUB_ENV

            - name: Install dependencies
              run: |
                  CONSTRAINT_URL="https://raw.githubusercontent.com/apache/airflow/constraints-${AIRFLOW_VERSION}/constraints-${PYTHON_VERSION}.txt"
                  echo "Installing Apache Airflow version ${AIRFLOW_VERSION} with constraints from ${CONSTRAINT_URL}"
                  pip install "apache-airflow==${AIRFLOW_VERSION}" --constraint "${CONSTRAINT_URL}"
                  pip install pytest

            - name: Install Flake8
              run: pip install flake8
            - name: Run Flake8
              run: flake8 . --max-line-length=120

            - name: Install Pylint
              run: pip install pylint
            - name: Run Pylint
              run: find . -name "*.py" | xargs pylint --output-format=colorized --disable=W0104

            - name: Install Black
              run: pip install black
            - name: Run Black
              run: find . -name "*.py" | xargs black --check

            - name: Test DAG integrity
              run: pytest tests/

    deploy:
        needs: [path-filter, build]
        runs-on: self-hosted
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Extract repository name
              run: echo "REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV

            - name: Git Sync
              env:
                  DEPLOY_DIRECTORY: ${{ env.REPO_NAME }}
              run: |
                  cd $DEPLOY_DIRECTORY

                  git fetch origin ${{ github.ref_name }}
                  git reset --hard FETCH_HEAD

                  git pull origin ${{ github.ref_name }}

            - name: Restart Docker Services
              if: ${{ needs.path-filter.outputs.docker-changed == 'true' }}
              env:
                  DEPLOY_DIRECTORY: ${{ env.REPO_NAME }}
              run: |
                  cd $DEPLOY_DIRECTORY

                  docker compose down
                  docker compose up -d
